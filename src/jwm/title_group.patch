From f7bb3cacd3dc9bbfeb2c814e247d04ed0d4f096a Mon Sep 17 00:00:00 2001
From: albert <twister9893@gmail.com>
Date: Mon, 13 Jun 2022 23:06:48 +0400
Subject: [PATCH 1/2] Add window title match support in Group config section

---
 src/group.c | 28 ++++++++++++++++++++++++++--
 src/group.h |  6 ++++++
 src/lex.c   |  1 +
 src/lex.h   |  1 +
 src/parse.c |  3 +++
 5 files changed, 37 insertions(+), 2 deletions(-)

diff --git a/src/group.c b/src/group.c
index 2c70b2b3..e2be5481 100644
--- a/src/group.c
+++ b/src/group.c
@@ -22,6 +22,7 @@ typedef unsigned int MatchType;
 #define MATCH_CLASS     1  /**< Match the window class. */
 #define MATCH_TYPE      2  /**< Match the window type. */
 #define MATCH_MACHINE   3  /**< Match the window machine. */
+#define MATCH_TITLE     4  /**< Match the window title. */
 
 /** List of match patterns for a group. */
 typedef struct PatternListType {
@@ -129,6 +130,17 @@ void AddGroupName(GroupType *gp, const char *pattern)
    }
 }
 
+/** Add a window title to a group. */
+void AddGroupTitle(GroupType *gp, const char *pattern)
+{
+   Assert(gp);
+   if(JLIKELY(pattern)) {
+      AddPattern(&gp->patterns, pattern, MATCH_TITLE);
+   } else {
+      Warning(_("invalid group name"));
+   }
+}
+
 /** Add a window type to a group. */
 void AddGroupType(GroupType *gp, const char *pattern)
 {
@@ -223,10 +235,12 @@ void ApplyGroups(ClientNode *np)
    GroupType *gp;
    char hasClass;
    char hasName;
+   char hasTitle;
    char hasType;
    char hasMachine;
    char matchesClass;
    char matchesName;
+   char matchesTitle;
    char matchesType;
    char matchesMachine;
 
@@ -247,9 +261,11 @@ void ApplyGroups(ClientNode *np)
       hasClass = 0;
       hasName = 0;
       hasType = 0;
+      hasTitle = 0;
       hasMachine = 0;
       matchesClass = 0;
       matchesName = 0;
+      matchesTitle = 0;
       matchesType = 0;
       matchesMachine = 0;
       for(lp = gp->patterns; lp; lp = lp->next) {
@@ -263,6 +279,11 @@ void ApplyGroups(ClientNode *np)
                matchesName = 1;
             }
             hasName = 1;
+         } else if(lp->match == MATCH_TITLE) {
+            if(Match(lp->pattern, np->name)) {
+               matchesTitle = 1;
+            }
+            hasTitle = 1;
          } else if(lp->match == MATCH_TYPE) {
              if(FindValue(windowTypeMapping, WINDOW_TYPE_COUNT, lp->pattern)
              == np->state.windowType) {
@@ -278,8 +299,11 @@ void ApplyGroups(ClientNode *np)
             Debug("invalid match in ApplyGroups: %d", lp->match);
          }
       }
-      if(hasName == matchesName && hasClass == matchesClass
-      && hasType == matchesType && hasMachine == matchesMachine) {
+      if(hasName == matchesName
+      && hasClass == matchesClass
+      && hasTitle == matchesTitle
+      && hasType == matchesType
+      && hasMachine == matchesMachine) {
          ApplyGroup(gp, np);
       }
    }
diff --git a/src/group.h b/src/group.h
index 70184ca2..9b291f48 100644
--- a/src/group.h
+++ b/src/group.h
@@ -84,6 +84,12 @@ void AddGroupClass(struct GroupType *gp, const char *pattern);
  */
 void AddGroupName(struct GroupType *gp, const char *pattern);
 
+/** Add a window title to a group.
+ * @param gp The group.
+ * @param pattern A pattern to match with the window title.
+ */
+void AddGroupTitle(struct GroupType *gp, const char *pattern);
+
 /** Add a window type to a group.
  * @param gp The group.
  * @param pattern A pattern to match with the window type.
diff --git a/src/lex.c b/src/lex.c
index 40fea4bd..184ad39a 100644
--- a/src/lex.c
+++ b/src/lex.c
@@ -85,6 +85,7 @@ static const StringMappingType TOKEN_MAP[] = {
    { "TaskList",           TOK_TASKLIST         },
    { "TaskListStyle",      TOK_TASKLISTSTYLE    },
    { "Text",               TOK_TEXT             },
+   { "Title",              TOK_TITLE            },
    { "TitleButtonOrder",   TOK_TITLEBUTTONORDER },
    { "Tray",               TOK_TRAY             },
    { "TrayButton",         TOK_TRAYBUTTON       },
diff --git a/src/lex.h b/src/lex.h
index bde2b88e..24523fb3 100644
--- a/src/lex.h
+++ b/src/lex.h
@@ -81,6 +81,7 @@ typedef enum {
    TOK_TASKLIST,
    TOK_TASKLISTSTYLE,
    TOK_TEXT,
+   TOK_TITLE,
    TOK_TITLEBUTTONORDER,
    TOK_TRAY,
    TOK_TRAYBUTTON,
diff --git a/src/parse.c b/src/parse.c
index 5f08b0ae..5119f66d 100644
--- a/src/parse.c
+++ b/src/parse.c
@@ -1838,6 +1838,9 @@ void ParseGroup(const TokenNode *tp)
       case TOK_NAME:
          AddGroupName(group, np->value);
          break;
+      case TOK_TITLE:
+         AddGroupTitle(group, np->value);
+         break;
       case TOK_TYPE:
          AddGroupType(group, np->value);
          break;

From 672acb5956c6bbc78f11ae3dcbe4a02282b0b1c6 Mon Sep 17 00:00:00 2001
From: albert <twister9893@gmail.com>
Date: Mon, 13 Jun 2022 23:58:22 +0400
Subject: [PATCH 2/2] Add man section for Title option

---
 jwm.1.in | 4 ++++
 1 file changed, 4 insertions(+)

diff --git a/jwm.1.in b/jwm.1.in
index 75ef227b..ab3dc5a7 100644
--- a/jwm.1.in
+++ b/jwm.1.in
@@ -785,6 +785,10 @@ toolbar, utility.
 The machine on which a program runs to match to be in this group.
 (the string WM_CLIENT_MACHINE)
 .RE
+.B Title
+.RS
+The window title for a program to match to be in this group (string in WM_NAME)
+.RE
 .B Option
 .RS
 An option for this group. Possible options are:
